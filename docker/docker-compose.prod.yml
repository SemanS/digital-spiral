version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: digital-spiral-postgres
    environment:
      POSTGRES_DB: digital_spiral
      POSTGRES_USER: digital_spiral
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U digital_spiral"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - digital-spiral-network

  # Redis Cache
  redis:
    image: redis:6-alpine
    container_name: digital-spiral-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - digital-spiral-network

  # Digital Spiral API
  api:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: digital-spiral-api
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://digital_spiral:${POSTGRES_PASSWORD:-changeme}@postgres:5432/digital_spiral
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      
      # Jira
      JIRA_BASE_URL: ${JIRA_BASE_URL}
      JIRA_CLIENT_ID: ${JIRA_CLIENT_ID}
      JIRA_CLIENT_SECRET: ${JIRA_CLIENT_SECRET}
      
      # AI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: json
      
      # API
      API_HOST: 0.0.0.0
      API_PORT: 8000
      WORKERS: ${WORKERS:-4}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - digital-spiral-network
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn src.interfaces.rest.main:app
          --host 0.0.0.0
          --port 8000
          --workers ${WORKERS:-4}
          --log-level ${LOG_LEVEL:-info}
      "

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: digital-spiral-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - digital-spiral-network

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: digital-spiral-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - digital-spiral-network

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: digital-spiral-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - digital-spiral-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  digital-spiral-network:
    driver: bridge

